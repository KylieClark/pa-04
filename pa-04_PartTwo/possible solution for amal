// // 2) Allocate memory for msg2
    // if ((msg2 = (uint8_t *)malloc(readML)) == NULL)
    // {
    //     fprintf( log , "Out of Memory allocating %lu bytes for msg2 in MSG2_receive() "
    //                    "... EXITING\n" , lenTktCipher );
    //     fflush( log ) ;  fclose( log ) ;
    //     exitError( "Out of Memory allocating ml2 in MSG2_receive()" );
    // }

 	// // 3) Read LenB from the pipe
    // if (read(fd, LenB, sizeof(size_t)) < sizeof(size_t))
    // {
    //     fprintf( log , "Unable to receive all %lu bytes of LenB in MSG2_receive() "
    //                    "... EXITING\n" , lenTktCipher );
    //     fflush( log ) ;  fclose( log ) ;
    //     exitError( "Unable to receive all bytes of LenB in MSG2_receive()" );
    // }
    // LenMsg2 += sizeof(size_t);

    // // 4) Allocate memory for LenB
    // if ((msg2 = (uint8_t *)malloc(readML)) == NULL)
    // {
    //     fprintf( log , "Out of Memory allocating %lu bytes for msg2 in MSG2_receive() "
    //                    "... EXITING\n" , lenTktCipher );
    //     fflush( log ) ;  fclose( log ) ;
    //     exitError( "Out of Memory allocating ml2 in MSG2_receive()" );
    // }

 	// // 5) Read IDb from the pipe
    // if (read(fd, IDb, LenB) < LenB)
    // {
    //     fprintf( log , "Unable to receive all %lu bytes of LenB in MSG2_receive() "
    //                    "... EXITING\n" , lenTktCipher );
    //     fflush( log ) ;  fclose( log ) ;
    //     exitError( "Unable to receive all bytes of LenB in MSG2_receive()" );
    // }
    // LenMsg2 += LenB;

    // // 6) Read Na2 from the pipe
    // if (read(fd, Na, sizeof(Nonce_t)) < sizeof(Nonce_t))
    // {
    //     fprintf( log , "Unable to receive all %lu bytes of Na "
    //                    "in MSG2_receive() ... EXITING\n" , NONCELEN );
        
    //     fflush( log ) ;  fclose( log ) ;   
    //     exitError( "Unable to receive all bytes of Na in MSG2_receive()" );
    // }
    // LenMsg2 += sizeof(Nonce_t);

    // // 7) Read lenTktCipher from the pipe
    // if (read(fd, &lenTktCipher, sizeof(size_t)) < sizeof(size_t))
    // {
    //     fprintf( log , "Unable to receive all %lu bytes of lenTktCipher(tktCipher) "
    //                    "in MSG2_receive() ... EXITING\n" , LENSIZE );
        
    //     fflush( log ) ;  fclose( log ) ;   
    //     exitError( "Unable to receive all bytes of lenTktCipher in MSG2_receive()" );
    // }
    // LenMsg2 += sizeof(size_t);

    // // 8) Allocate memory for TktCipher
    // if ((tktCipher = (uint8_t *)malloc(lenTktCipher)) == NULL)
    // {
    //     fprintf( log , "Out of Memory allocating %lu bytes for tktCipher in MSG2_receive() "
    //                    "... EXITING\n" , lenTktCipher );
    //     fflush( log ) ;  fclose( log ) ;
    //     exitError( "Out of Memory allocating tktCipher in MSG2_receive()" );
    // }

 	// // 9) Read TktCipher from the pipe
    // if (read(fd, tktCipher, lenTktCipher) < lenTktCipher)
    // {
    //     fprintf( log , "Unable to receive all %lu bytes of tktCipher in MSG2_receive() "
    //                    "... EXITING\n" , lenTktCipher );
    //     fflush( log ) ;  fclose( log ) ;
    //     exitError( "Unable to receive all bytes of tktCipher in MSG2_receive()" );
    // }
    // LenMsg2 += *lenTktCipher;